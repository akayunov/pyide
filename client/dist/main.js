!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class o{constructor(e){for(let t=1;t<=e;t++){let e=document.createElement("div");e.className="line-number",e.textContent=String(t),document.getElementById("line-number").appendChild(e)}}adjust(e){let t=parseInt(document.getElementById("line-number").lastChild.textContent);for(let n=t+1;n<=t+Math.abs(t-e);n++)if(e>t){let e=document.createElement("div");e.className="line-number",e.textContent=String(n),document.getElementById("line-number").appendChild(e)}else document.getElementById("line-number").removeChild(document.getElementById("line-number").lastElementChild)}getByNumber(e){return document.getElementsByClassName("line-number").item(e)}addNumber(){let e=document.createElement("div");e.className="line-number",e.textContent=(document.getElementsByClassName("line-number").length+1).toString(),document.getElementById("line-number").appendChild(e)}}class i{constructor(){this.autoCompleteElement=null,this.activeVariant=0,this.createAutocompleteElement([]),this.active=!1}commandGetAutocompleteShow(e,t,n){return JSON.stringify({type:"autoCompleteShow",data:{fileName:n,lineText:e.textContent,positionInLine:t,lineNumber:parseInt(e.getAttribute("tabIndex"))}})}createAutocompleteElement(e){!0===this.active&&this.hide(),this.active=!0,this.autoCompleteElement=document.createElement("div"),this.autoCompleteElement.className="autocomplete",this.refill(e)}refill(e){for(;this.autoCompleteElement.firstChild;)this.autoCompleteElement.removeChild(this.autoCompleteElement.firstChild);for(let t of e){let e=document.createElement("div");e.textContent=t,this.autoCompleteElement.appendChild(e)}}show(e,t){this.active=!0,this.autoCompleteElement.style.top=e.bottom.toString()+"px",this.autoCompleteElement.style.left=e.left.toString()+"px",t.appendChild(this.autoCompleteElement)}getSymbols(e){return this.autoCompleteElement.childNodes.item(this.activeVariant).textContent.slice(e)}hide(){this.active&&(this.active=!1,this.autoCompleteElement.remove(),this.activeVariant=0)}hlNext(){if(this.activeVariant!==this.autoCompleteElement.childNodes.length&&(this.autoCompleteElement.childNodes.item(this.activeVariant).removeAttribute("id"),this.activeVariant+=1,this.active)){this.autoCompleteElement.childNodes.item(this.activeVariant).setAttribute("id","active-autocomplete")}}hlPrev(){if(0!==this.activeVariant&&(this.autoCompleteElement.childNodes.item(this.activeVariant).removeAttribute("id"),this.activeVariant-=1,this.active)){this.autoCompleteElement.childNodes.item(this.activeVariant).setAttribute("id","active-autocomplete")}}}class r extends i{constructor(){super()}}class s{constructor(e){this.curentFile="",this.curentFile="",this.code=e,$.ajax({method:"GET",dataType:"json",contentType:"application/json; charset=utf-8",url:"/server/filelisting"}).done(function(e){e.forEach(function(e){let t=$(e)[0];const n=document.getElementById("filelisting");n?n.appendChild(t):console.log("нет елемента filelisting")})}).fail(function(e,t){console.log("все сломалось в folder listing",e,t)})}get(e){const t=e.target;if(!t)return void console.log("event.target is empty in folder listing get");let n=t.parentNode;if(!n)return void console.log("event.target.parentNode is empty in folder listing get");const o=n.childNodes[0];if(n&&"rotate(180deg)"===o.style.transform){o.style.transform="rotate(90deg)";for(let e=n.childNodes.length-1;e>=0;e--)["folderlink","filelink"].includes(n.childNodes[e].className)&&n.removeChild(n.childNodes[e])}else"rotate(90deg)"===o.style.transform?(o.style.transform="rotate(180deg)",$.ajax({method:"GET",dataType:"json",contentType:"application/json; charset=utf-8",url:e.target.href}).done(function(e){e.forEach(function(e){$(n).append($(e));let t=$(e)[0];document.getElementById("filelisting").appendChild(t)})}).fail(function(e,t){console.log("все сломалось в folder listing",e,t)})):o.style.transform="rotate(90deg)";e.preventDefault(),e.stopPropagation()}showFile(e){let t,n=this;return $.ajax({async:!1,method:"GET",url:e.target.attributes.href.value,dataType:"json",contentType:"application/json; charset=utf-8"}).done(function(o){Array.from(document.getElementById("code").children).forEach(function(e){e.remove()}),o.forEach(function(e){document.getElementById("code").appendChild($(e)[0])}),n.curentFile=e.target.attributes.href.value,t=o.length}).fail(function(e,t){console.log("все сломалось в get CODE",e,t)}),t}}class l{constructor(e,t){this._cursorParentElement=null,this.position=null,this.cursorHighlightElement=null,this.code=e,this.lineNumber=t,this.createCursorHTMLElement(),this.createCursorHightlightElement();let n=this.code.getFirstElement();this.cursorParentElement=n,this.cursorParentElement.appendChild(this.cursorElement),this.cursorParentElement.appendChild(document.createTextNode("")),this.putCursorByPositionInNode(n,0),""===n.textContent&&(this.cursorText="\n")}createCursorHightlightElement(){this.cursorHighlightElement=document.createElement("div"),this.cursorHighlightElement.id="cursorHighlightElement",this.cursorHighlightElement.style.width="3px",this.cursorHighlightElement.style.height="18px",this.cursorHighlightElement.style.background="black"}createCursorHTMLElement(e=""){this.cursorElement=document.createElement("span"),this.cursorElement.className="cursor",this.cursorText=e}putCursorByPositionInNode(e,t){if(null===e)return void console.log("null element in putCursorByPositionInNode");if(this.cursorParentElement!==e){this.cursorParentElement=null;let n=e.textContent;this.cursorParentElement=e;let o=this.cursorParentElement.childNodes;1!==o.length&&console.log("childNodes.length:=",o.length);let i=o.item(0).splitText(t);this.cursorText=this.cursorParentElement.textContent.slice(t,t+1),i.textContent=n.slice(t+1),i.before(this.cursorElement)}else if(t!==this.getPositionInNode()){let e="",n="",o="";e=this.cursorParentElement.textContent.slice(0,t),n=this.cursorParentElement.textContent.slice(t,t+1),o=this.cursorParentElement.textContent.slice(t+1),this.cursorElement.previousSibling.textContent=e,this.cursorText=n,this.cursorElement.nextSibling.textContent=o}else console.log("Put cursor in same position.");let n=this.lineNumber.getByNumber(parseInt(e.parentElement.getAttribute("tabIndex"))-1),o=n.getBoundingClientRect(),i=this.cursorElement.getBoundingClientRect();this.cursorHighlightElement.style.top=(i.top-o.top).toString()+"px",this.cursorHighlightElement.style.left=(i.left-o.left-3).toString()+"px",n.appendChild(this.cursorHighlightElement),this.scrollIntoView()}getCoordinate(){return this.cursorElement.getBoundingClientRect()}getPositionInNode(){return this.cursorElement.previousSibling.textContent.length}resetLinePosition(){this.position=null}setLinePosition(){null===this.position&&(this.position=this.code.getPositionInLine(this.cursorParentElement,this.getPositionInNode()))}getLineNumber(){return this.code.getLineNumber(this.cursorParentElement)}scrollIntoView(){this.cursorElement.scrollIntoView({block:"nearest",inline:"nearest"})}set cursorParentElement(e){null===e?(this.cursorElement.replaceWith(this.cursorText),this.cursorParentElement.normalize(),this._cursorParentElement=null,this.cursorText=""):(e.setAttribute("nodeid",Math.floor(1e9*Math.random()+1).toString()),this._cursorParentElement=e)}get cursorParentElement(){return this._cursorParentElement}set cursorText(e){this.cursorElement.textContent=e}get cursorText(){return this.cursorElement.textContent}putSymbol(e){this.cursorElement.previousSibling.textContent+=e,this.putCursorByPositionInNode(this.cursorParentElement,this.getPositionInNode()),this.resetLinePosition()}moveLeft(){if(""!==this.cursorElement.previousSibling.textContent)this.putCursorByPositionInNode(this.cursorParentElement,this.getPositionInNode()-1);else if(""===this.cursorElement.previousSibling.textContent){let e=this.code.getPreviousElement(this.cursorParentElement);if(null===e)return;this.putCursorByPositionInNode(e,e.textContent.length-1)}this.resetLinePosition()}moveRight(){if(""!==this.cursorElement.nextSibling.textContent)this.putCursorByPositionInNode(this.cursorParentElement,this.getPositionInNode()+1);else if(""===this.cursorElement.nextSibling.textContent){let e=this.code.getNextElement(this.cursorParentElement);if(null===e)return;this.putCursorByPositionInNode(e,0)}this.resetLinePosition()}moveUpRow(){this.setLinePosition();let e=this.code.getOverElement(this.cursorParentElement,this.position);this.putCursorByPositionInNode(e.node,e.positionInNode)}moveDownRow(){this.setLinePosition();let e=this.code.getUnderElement(this.cursorParentElement,this.position);this.putCursorByPositionInNode(e.node,e.positionInNode)}pageDown(){this.setLinePosition();let e=this.code.pageDown(this.cursorParentElement,this.position);this.putCursorByPositionInNode(e.node,e.positionInNode)}pageUp(){this.setLinePosition();let e=this.code.pageUp(this.cursorParentElement,this.position);this.putCursorByPositionInNode(e.node,e.positionInNode)}moveHome(){this.putCursorByPositionInNode(this.code.getFirstElementOnLineByNode(this.cursorParentElement),0),this.resetLinePosition()}moveEnd(){let e=this.code.getLastElementOnLineByNode(this.cursorParentElement);this.putCursorByPositionInNode(e,e.textContent.length-1),this.resetLinePosition()}deleteSymbolUnder(){if(this.moveRight(),0!==this.getPositionInNode())this.cursorElement.previousSibling.textContent=this.cursorElement.previousSibling.textContent.slice(0,this.getPositionInNode()-1);else{let e=this.code.getPreviousElement(this.cursorParentElement);e.textContent=e.textContent.slice(0,e.textContent.length-1),0===e.textContent.length&&this.code.removeNode(e)}}deleteSymbolBefore(){this.moveLeft(),this.deleteSymbolUnder()}setByClick(){let e=window.getSelection();console.log("selObj",e,e.getRangeAt(0),e.getRangeAt(0),"|"+e.toString()+"|");let t=e.anchorNode;if(t.nodeType!==Node.TEXT_NODE)return void console.log("selected node is not text type");let n=t.parentElement;"cursor"===t.parentElement.className&&(n=n.parentElement),this.putCursorByPositionInNode(n,e.anchorOffset),this.resetLinePosition()}addNewRow(){let e=this.code.divideLine(this.cursorParentElement),t=this.getPositionInNode();this.moveLeft(),""!==this.cursorElement.nextSibling.textContent&&(this.cursorElement.nextSibling.textContent="\n"),e.textContent=e.textContent.slice(t),this.putCursorByPositionInNode(e,0),this.cursorElement.previousSibling.textContent=""}goToDefinition(e){}putTab(){this.putSymbol("\t")}putString(e){for(let t of e)this.putSymbol(t)}}class u extends l{constructor(e,t){super(e,t)}putTab(){this.putSymbol(" "),this.putSymbol(" "),this.putSymbol(" "),this.putSymbol(" ")}}class a{constructor(){}init(e){$.ajax({method:"GET",dataType:"json",contentType:"application/json; charset=utf-8",url:e.target.href.replace(/:31415\/server\/code/,":31415/server/tags")}).done(function(e){const t=document.getElementById("tags");if(t)for(let e=t.childNodes.length-1;e>=0;e--)t.removeChild(t.childNodes[e]);else console.log("parentDiv is empty in  tags listing");e.forEach(function(e){const t=document.getElementById("tags");t?t.appendChild($(e)[0]):console.log("tags is empty in  tags listing")})}).fail(function(e,t){console.log("все сломалось в tags listing",e,t)})}}class c{constructor(e,t){this.node=e,this.positionInNode=t}}class d{constructor(e,t){this.screenSize=40,this.fileName="/"+e.split("/").slice(3).join("/"),this.lineNumber=t,document.getElementById("code").appendChild(this.createNewLine(1))}createNewLine(e=1,t=""){let n=document.createElement("div");n.setAttribute("tabIndex",e.toString()),n.className="content-line";let o=document.createElement("span");return n.appendChild(o),o.appendChild(document.createTextNode(t)),n}putNewLineAfter(e,t=""){let n=this.createNewLine(1,t);return e.parentElement.after(n),this.lineNumber.addNumber(),n}getFirstLine(){let e=document.getElementsByClassName("content-line").item(0);return e.focus(),e}getLineByNumber(e){return document.querySelector('[tabIndex="'+e.toString()+'"]')}getNodeByPosition(e,t){let n=!1,o=0,i=0,r=e.firstChild;for(let s of e.childNodes)if((o+=s.textContent.length)>=t+1){r=s,i=s.textContent.length-(o-t),n=!0;break}return n||(i=(r=e.lastChild).textContent.length-1),new c(r,i)}recalculateTabIndex(e){let t=parseInt(e.previousElementSibling.getAttribute("tabIndex"))+1;for(e.setAttribute("tabIndex",t.toString());e.nextElementSibling;)t+=1,(e=e.nextElementSibling).setAttribute("tabIndex",t.toString())}getFirstElement(){return this.getFirstLine().childNodes.item(0)}getFirstElementOnLineByNode(e){return e.parentElement.firstChild}getLastElementOnLineByNode(e){return e.parentElement.lastChild}getPreviousElement(e){return null!==e.previousElementSibling?e.previousElementSibling:null!==e.parentElement.previousElementSibling?e.parentElement.previousElementSibling.lastChild:null}getNextElement(e){return null!==e.nextElementSibling?e.nextElementSibling:null!==e.parentElement.nextElementSibling?e.parentElement.nextElementSibling.firstChild:null}getPositionInLine(e,t){let n=0;for(let o of e.parentElement.childNodes){if(o===e){n+=t;break}n+=o.textContent.length}return n}getLineNumber(e){return e.parentElement.getAttribute("tabIndex")}getOverElement(e,t){return null!==e.parentElement.previousElementSibling?this.getNodeByPosition(e.parentElement.previousElementSibling,t):new c(null,0)}getUnderElement(e,t){return null!==e.parentElement.nextElementSibling?this.getNodeByPosition(e.parentElement.nextElementSibling,t):new c(null,0)}pageUp(e,t){let n=e.parentElement,o=0;for(;n.previousElementSibling&&(o+=1,n=n.previousElementSibling,!(o>=this.screenSize)););return this.getNodeByPosition(n,t)}pageDown(e,t){let n=e.parentElement,o=0;for(;n.nextElementSibling&&(o+=1,n=n.nextElementSibling,!(o>=this.screenSize)););return this.getNodeByPosition(n,t)}divideLine(e){let t=this.putNewLineAfter(e);for(t.lastChild.replaceWith(e.cloneNode()),t.lastChild.textContent=e.textContent;e.nextElementSibling;)t.appendChild(e.nextElementSibling),e=e.nextElementSibling;return this.recalculateTabIndex(t),t.firstChild}removeNode(e){let t=null!==e.parentElement.previousElementSibling?e.parentElement.previousElementSibling:this.getFirstLine();if(1===e.parentElement.childNodes.length)e.parentElement.remove();else{if(""===e.textContent&&e.parentElement.nextElementSibling&&e===e.parentElement.lastChild){for(;e.parentElement.nextElementSibling.firstChild;)e.parentElement.appendChild(e.parentElement.nextElementSibling.removeChild(e.parentElement.nextElementSibling.firstChild));e.parentElement.nextElementSibling.remove()}e.remove()}this.recalculateTabIndex(t)}replaceLine(e,t,n){let o=this.getLineByNumber(e),i=document.createElement("div");i.innerHTML=t.join("");for(let e of o.childNodes){let t=e.getAttribute("nodeid");if(null!==t){let n=[];for(let e of Array.from(i.childNodes))e.getAttribute("nodeid")===t&&n.push(e);if(n.map(e=>e.textContent).join("")===e.textContent){for(let t of n.reverse())t.removeAttribute("nodeid"),e.after(t);e.remove()}else console.log("element content is different:|"+n.map(e=>e.textContent).join("")+"| vs |"+e.textContent,"|")}}}commandGetParseLineMsg(e){return JSON.stringify({type:"lineParse",data:{fileName:this.fileName,outerHTML:e.outerHTML,lineNumber:parseInt(e.getAttribute("tabIndex"))}})}}let m={};class h{constructor(){}registerCommandHandler(e,t){m[e]=t}}class p{constructor(e){this.connectionAttemptCounter=0,this.serverUrl=e,this.createSocket()}debug(...e){console.log(...e)}createSocket(){this.socket=new WebSocket(this.serverUrl),this.socket.onmessage=(e=>{this.onMessage(e)}),this.socket.onclose=(e=>{this.onClose(e)}),this.socket.onopen=(()=>{this.onOpen()}),this.socket.onerror=(e=>{console.error("WebSocket error observed:",e)})}onOpen(){this.debug("connected to:",this.serverUrl)}onClose(e){if(e.wasClean?this.debug("Clean closed"):this.debug("Connection reset by peer"),this.debug("Connection reset, code=:"+e.code+", reason="+e.reason,"connectionAttemptCounter=",this.connectionAttemptCounter),this.connectionAttemptCounter>10)throw this.debug("Connection attempt was too mush, just give up: ",this.connectionAttemptCounter),this.connectionAttemptCounter=0,new Error("Connection attempt was too mush, just give up");this.connectionAttemptCounter+=1,this.debug("Create new connection",this),this.socket.close(),this.createSocket()}onMessage(e){this.connectionAttemptCounter=0;let t=JSON.parse(e.data);this.debug("received:",t,t.type,typeof t,m),m[t.type](t)}sendCommand(e,t){if(!m[e])throw this.debug("Message handler is not found:",m,e,m[e]),new Error("Message handler is not found");this.socket.readyState===WebSocket.OPEN?(this.socket.send(t),this.debug("send:",t,e,typeof t)):(this.debug("send failed, socket in state: ",this.socket.readyState,t,m),this.createSocket())}}new class extends h{constructor(){super(),this.serverUrl="ws://"+window.location.host+"/server/command";let e=this;document.addEventListener("DOMContentLoaded",function(){e.setKeyBoardEventListeners(),e.setMouseEventListeners(),e.lineNumber=new o(1),e.code=new d("",e.lineNumber),e.tags=new a,e.fileListing=new s(e.code),e.autoComplete=new i,e.cursor=new l(e.code,e.lineNumber),e.pressedKeys={},e.commandBus=new p(e.serverUrl),e.registerCommandHandler("lineParse",t=>{e.handlerLineParse(t)}),e.registerCommandHandler("autoCompleteShow",t=>{e.handlerAutocompleteShow(t)})})}handlerLineParse(e){if(this.code.fileName!==e.data.fileName)return;let t=this.code.getLineByNumber(e.data.lineNumber),n=this.cursor.getLineNumber(),o=this.code.getPositionInLine(this.cursor.cursorParentElement,this.cursor.getPositionInNode());if(this.code.replaceLine(e.data.lineNumber,e.data.lineElements,this.cursor),parseInt(n)===e.data.lineNumber){let e=this.code.getNodeByPosition(t,o);this.cursor.putCursorByPositionInNode(e.node,e.positionInNode)}}handlerAutocompleteShow(e){this.autoComplete.refill(e.data.result),this.autoComplete.show(this.cursor.getCoordinate(),this.lineNumber.getByNumber(e.data.lineNumber))}setKeyBoardEventListeners(){let e=this;document.getElementById("code").addEventListener("keyup",function(t){e.pressedKeys[t.code]=!1,t.preventDefault()}),document.getElementById("code").addEventListener("keydown",function(t){e.pressedKeys[t.code]=!0,"Enter"===t.code?(e.cursor.addNewRow(),t.preventDefault()):"Tab"===t.code?(e.autoComplete.active?(e.cursor.putString(e.autoComplete.getSymbols(e.cursor.getPositionInNode())),e.autoComplete.hide()):e.cursor.putTab(),t.preventDefault()):"ArrowUp"===t.code?(e.autoComplete.active?e.autoComplete.hlPrev():e.cursor.moveUpRow(),t.preventDefault()):"ArrowDown"===t.code?(e.autoComplete.active?e.autoComplete.hlNext():e.cursor.moveDownRow(),t.preventDefault()):"Space"===t.code?(e.cursor.putSymbol(t.key),e.autoComplete.hide(),t.preventDefault()):"PageUp"===t.code?(e.cursor.pageUp(),t.preventDefault()):"PageDown"===t.code?(e.cursor.pageDown(),t.preventDefault()):"End"===t.code?(e.cursor.moveEnd(),t.preventDefault()):"Home"===t.code?(e.cursor.moveHome(),t.preventDefault()):"ArrowLeft"===t.code?(e.cursor.moveLeft(),t.preventDefault()):"ArrowRight"===t.code?(e.cursor.moveRight(),t.preventDefault()):"ShiftLeft"===t.code||"ControlLeft"===t.code||"AltLeft"===t.code||"F5"===t.code||("Backspace"===t.code?(e.cursor.deleteSymbolBefore(),t.preventDefault()):"Delete"===t.code?(e.cursor.deleteSymbolUnder(),t.preventDefault()):(e.cursor.putSymbol(t.key),e.commandBus.sendCommand("autoCompleteShow",e.autoComplete.commandGetAutocompleteShow(t.target,e.code.getPositionInLine(e.cursor.cursorParentElement,e.cursor.getPositionInNode()),e.code.fileName)),t.preventDefault())),e.commandBus.sendCommand("lineParse",e.code.commandGetParseLineMsg(t.target))})}setMouseEventListeners(){let e=this;document.getElementById("code").addEventListener("click",function(t){e.cursor.setByClick(),e.autoComplete.hide(),e.pressedKeys.ControlLeft&&e.cursor.goToDefinition(e.fileListing.curentFile),t.preventDefault()}),document.getElementById("filelisting").addEventListener("click",function(t){const n=t.target;if("filelink"===n.parentElement.className){let o=e.fileListing.showFile(t);e.lineNumber.adjust(o);let s=n.getAttribute("href");s.endsWith(".py")?(e.code=new d(s,e.lineNumber),e.cursor=new u(e.code,e.lineNumber),e.autoComplete=new r):(e.code=new d(s,e.lineNumber),e.cursor=new l(e.code,e.lineNumber),e.autoComplete=new i)}else"folderlink"===n.parentElement.className&&e.fileListing.get(t);t.preventDefault()})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,